apply plugin: "maven-publish"

publishing {

	// publish to public/private maven repository
	//	repositories {
	//		maven {
	//			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
	//			credentials {
	//				username ossrhUsername
	//				password ossrhPassword
	//			}
	//		}
	//	}

	publications {
		mavenJava(MavenPublication) {
			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				url = "https://github.com/amrjlg/common"
				organization {
					name = "Spring IO"
					url = "https://github.com/amrjlg/common"
				}
				licenses {
					license {
						name = "Apache License, Version 2.0"
						url = "https://www.apache.org/licenses/LICENSE-2.0"
						distribution = "repo"
					}
				}
				scm {
					url = "https://github.com/amrjlg/common"
					connection = "scm:git:git://https://github.com/amrjlg/common"
					developerConnection = "scm:git:git://https://github.com/amrjlg/common"
				}
				developers {
					developer {
						id = "jhoeller"
						name = "Juergen Hoeller"
						email = "jhoeller@pivotal.io"
					}
				}
				issueManagement {
					system = "GitHub"
					url = "https://github.com/amrjlg/common/issues"
				}
			}
			versionMapping {
				usage('java-api') {
					fromResolutionResult()
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

//configureDeploymentRepository(project)
//
//void configureDeploymentRepository(Project project) {
//    project.plugins.withType(MavenPublishPlugin.class).all {
//        PublishingExtension publishing = project.getExtensions().getByType(PublishingExtension.class);
//        if (project.hasProperty("deploymentRepository")) {
//            publishing.repositories.maven {
//                it.url = project.property("deploymentRepository")
//                it.name = "deployment"
//            }
//        }
//    }
//}